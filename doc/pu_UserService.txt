/*
*Id

*Unidade

*Funcion
*Motivacion da proba
*Entradas
*Salidas
*Inicializacion contexto(opcional)
*/







/*
PR-UN-066

UserService

registerUser
Aplicacion de particiones equivalentes
	-loginName del usuario
	-contraseña 
	-UserProfilDetails del usuario
UserProfile con los datos de registro
Mockeado:
	-findByLoginName(loginName) tira InstanceNotFoundException
*/

/*
PR-UN-067

UserService

registerUser
Aplicacion de particiones equivalentes
	-loginName del usuario
	-contraseña
	-UserProfileDetails del usuario
Excepcion:"DuplicateInstanceException" 
--
*/

/*
PR-UN-068

UserService

login
Aplicacion de particiones equivalentes
	-loginName del usuario
	-password en claro del usuario
	-false
UserProfile del usuario autenticado 
Mockeado:
	-findByLoginName(loginName) return UserProfile esperado
*/

/*
PR-UN-069

UserService

login
Aplicacion de particiones equivalentes
	-loginName del usuario
	-password encriptada del usuario
	-true
UserProfile del usuario autenticado 
Mockeado:
	-findByLoginName(loginName) return UserProfile esperado
*/

/*
PR-UN-070

UserService

login
Aplicacion de particiones equivalentes
	-loginName de usuario no existente
	-password
	-true
Excepcion:"InstanceNotFoundException"
Mockeado:
	-findByLoginName(loginName) tira InstanceNotFoundException
*/

/*
PR-UN-071

UserService

login
Aplicacion de particiones equivalentes
	-loginName del usuario existente
	-password encriptada incorrecta
	-true
Excepcion:"IncorrectPasswordException"
Mockeado:
	-findByLoginName(loginName) return UserProfile de entrada
*/

/*
PR-UN-072

UserService

login
Aplicacion de particiones equivalentes
	-loginName del usuario existente
	-password en claro incorrecta
	-false
Excepcion:"IncorrectPasswordException"
Mockeado:
	-findByLoginName(loginName) return UserProfile de entrada
*/

/*
PR-UN-073

UserService

findUserProfile
Comprobacion busqueda de un usuario por su userProfileId
userProfileId de un usuario existente 
UserProfile correspondiente al userProfileId
Mockeado: 
	-UserProfileDao.find(id) return UserProfile esperado
*/

/*
PR-UN-074

UserService

findUserProfile
Comprobacion busqueda de un usuario inexistente por su userProfileId
userProfileId inexistente en la base de datos
Excepcion:"InstanceNotFoundException"
Mockeado:
	-UserProfileDao.find(id) tira InstanceNotFoundException
*/

/*
PR-UN-075

UserService

updateUserProfileDetails
Comprobacion actualización de un UserProfileDetails existente
	-userProfileId del usuario 
	-UserDetails
No salida
Mockeado: 
	-UserProfileDao.find(id) return UserProfile para actualizar
*/


/*
PR-UN-076

UserService

updateUserProfileDetails
Comprobacion actualización de un UserProfileDetails inexistente
	-userProfileId inexistente
	-UserProfileDetails detalles del ususario 
Excepcion:"InstanceNotFoundException"
Mockeado:
	-UserProfileDao.find(id) tira InstanceNotFoundException
*/


/*
PR-UN-077

UserService

changePassword
Comprobacion cambio de contraseña
	-userProfileId del usuario
	-oldClearPassword contraseña antigua del usuario
	-newClearPassword nueva contraseña del usuario
No salida
Mockeado: 
	-UserProfileDao.find(id) return UserProfile de entrada

*/

/*
PR-UN-078

UserService

changePassword
Aplicacion de particiones equivalentes en la entrada del metodo
	-userProfileId inexistente del usuario 
	-oldClearPassword contraseña antigua del usuario
	-newClearPassword nueva contraseña del usuario
Excepcion:"InstanceNotFoundException"
Mockeado:
	-UserProfileDao.find(id) tira InstanceNotFoundException
*/

/*
PR-UN-079

UserService

changePassword
Aplicacion de particiones equivalentes en la entrada del metodo
	-userProfileId del usuario
	-oldClearPassword contraseña antigua del usuario
	-newClearPassword nueva contraseña invalida del usuario
Excepcion:"IncorrectPasswordException"
Mockeado: 
	-UserProfileDao.find(id) return UserProfile de entrada
*/

/*
PR-UN-080

UserService

addEvento
Aplicacion de particiones equivalentes en la entrada del metodo
	-Evento sin id con fecha posterior al instante actual
No error
--
 */

 /*
PR-UN-081

UserService

addEvento
Aplicacion de particiones equivalentes en la entrada del metodo
	-Evento sin id con fecha anterior al instante actual
Excepcion:InvalidDateException
--
 */

/*
PR-UN-082

UserService

addEvento
Aplicacion de particiones equivalentes en la entrada del metodo
	-Evento sin id con fecha, nombre y categoria coincidentes con un Evento en base de datos
Excepcion:InstanceAlreadyCreatedException
Mockeado: 
	-EventoDao.existsEvent(nombre evento entrada,categoria entrada,fecha entrada) return true
 */

/*
PR-UN-083

UserService

findEventos
Aplicacion de particiones equivalentes en la entrada del metodo
	-null
	-null
	-true
	-0
	-2
EventoBlock (lista de 2 Eventos,TRUE)
Mockeado: 
	-EventoDao.findByParameters(null,null,true,0,3) return lista de 3 eventos
 */

/*
PR-UN-084

UserService

findEventos
Aplicacion de particiones equivalentes en la entrada del metodo
	-null
	-null
	-true
	-0
	-2
EventoBlock (lista de 2 Eventos,FALSE)
Mockeado: 
	-EventoDao.findByParameters(null,null,true,0,3) return lista de 2 eventos
 */

/*
PR-UN-085

UserService

findEventos
Aplicacion de particiones equivalentes en la entrada del metodo
	-null
	-null
	-true
	-0
	-2
EventoBlock (lista vacia,FALSE)
Mockeado: 
	-EventoDao.findByParameters(null,null,true,0,3) return lista vacia
 */


 /*
PR-UN-086

UserService

addTipoApuesta
Aplicacion de particiones equivalentes en la entrada del metodo
	-idEvento de base de datos con fecha posterior al instante actual
	-TipoApuesta sin id cuya pregunta no este en el Evento y con una lista de OpcionApuesta sin id sin repetir.
Mismo TipoApuesta con id y la lista de OpcionApuesta con ids
Mockeado:
	-EventoDao.find(idEvento) return Evento esperado
*/

 /*
PR-UN-087

UserService

addTipoApuesta
Aplicacion de particiones equivalentes en la entrada del metodo
	-idEvento de base de datos con fecha anterior al instante actual
	-TipoApuesta sin id cuya pregunta no este en el Evento y con una lista de OpcionApuesta sin id sin repetir.
Excepcion:EventoStartedException
Mockeado:
	-EventoDao.find(idEvento) tira InstanceNotFoundException
*/

/*
PR-UN-088

UserService

addTipoApuesta
Aplicacion de particiones equivalentes en la entrada del metodo
	-idEvento de base de datos con fecha posterior al instante actual
	-TipoApuesta sin id cuya pregunta coincida con la de otro TipoApuesta en el Evento 
Excepcion:InstanceAlreadyCreatedException
Mockeado:
	-EventoDao.find(idEvento) return Evento esperado
*/

 /*
PR-UN-089

UserService

addTipoApuesta
Aplicacion de particiones equivalentes en la entrada del metodo
	-idEvento de base de datos con fecha posterior al instante actual
	-TipoApuesta sin id cuya pregunta no este en el Evento y con una lista de OpcionApuesta en la que dos opcionesApuesta coincidan en su respuesta
Excepcion:RepeatedOpcionApuestaException
Mockeado:
	-EventoDao.find(idEvento) return Evento esperado
*/

 /*
PR-UN-090

UserService

apostar
Aplicacion de particiones equivalentes en la entrada del metodo
	-idOpcionApuesta de base de datos
	-idUsuario de base datos
	-cantidad a apostar
ApuestaRealizada(con el usuario correspondiente al idUsuario,con la OpcionApuesta correspondiente al idOpcionApuesta y la cantidad de entrada)
Mockeado: 
	-OpcionApuestaDao.find(idOpcionApuesta) return OpcionApuesta sobre la que apostar
	-UserProfileDao.find(idUser) return UserProfile que realiza la apuesta
*/

/*
PR-UN-091

UserService

apostar
Aplicacion de particiones equivalentes en la entrada del metodo
	-idOpcionApuesta de base de datos
	-idUsuario de base datos
	-cantidad a apostar negativa
Excepcion:InvalidValueException
Mockeado: 
	-OpcionApuestaDao.find(idOpcionApuesta) return OpcionApuesta sobre la que apostar
	-UserProfileDao.find(idUser) return UserProfile que realiza la apuesta
*/



 /*
PR-UN-092

UserService

apostar
Aplicacion de particiones equivalentes en la entrada del metodo
	-idOpcionApuesta de base de datos
	-idUsuario de base datos
	-cantidad a apostar
Excepcion:EventoStartedException
Mockeado: 
	-OpcionApuestaDao.find(idOpcionApuesta) return OpcionApuesta sobre la que apostar
*/

/*
PR-UN-093

UserService

apostar
Aplicacion de particiones equivalentes en la entrada del metodo
	-idOpcionApuesta de base de datos
	-idUsuario
	-cantidad a apostar
Excepcion:InstanceNotFoundException
Mockeado: 
	-OpcionApuestaDao.find(idOpcionApuesta) tira InstanceNotFoundException
*/

/*
PR-UN-094

UserService

apostar
Aplicacion de particiones equivalentes en la entrada del metodo
	-idOpcionApuesta
	-idUsuario de base datos
	-cantidad a apostar
Excepcion:InstanceNotFoundException
Mockeado: 
	-OpcionApuestaDao.find(idOpcionApuesta) return OpcionApuesta sobre la que apostar
	-UserProfileDao.find(idUser) tira InstanceNotFoundException
*/

/*
PR-UN-095

UserService

especificarganadoras
Aplicacion de particiones equivalentes en la entrada del metodo
	-idTipoApuesta
	-Lista de idOpcionApuesta de dicho TipoApuesta
No salida
Mockeado: 
	-TipoApuestaDao.find(idTipoApuesta) return TipoApuesta que se quiere resolver
*/

/*
PR-UN-096

UserService

especificarganadoras
Aplicacion de particiones equivalentes en la entrada del metodo
	-idTipoApuesta
	-Lista de idOpcionApuesta de dicho TipoApuesta
Excepcion:EventoNotStartedException
Mockeado: 
	-TipoApuestaDao.find(idTipoApuesta) return TipoApuesta que se quiere resolver
*/

/*
PR-UN-097

UserService

especificarganadoras
Aplicacion de particiones equivalentes en la entrada del metodo
	-idTipoApuesta con las opcionesApuesta resueltas
	-Lista de idOpcionApuesta de dicho TipoApuesta
Excepcion:OpcionApuestaAlreadySolvedException
Mockeado: 
	-TipoApuestaDao.find(idTipoApuesta) return TipoApuesta que se quiere resolver
*/


/*

PR-UN-098

UserService

especificarganadoras
Aplicacion de particiones equivalentes en la entrada del metodo
	-idTipoApuesta de TipoApuesta(simple ganadora) con las opcionesApuesta
	-Lista con 1 o más idOpcionApuesta de dicho TipoApuesta
Excepcion:SimpleWinnerException
Mockeado: 
	-TipoApuestaDao.find(idTipoApuesta) return TipoApuesta que se quiere resolver
*/

/*
PR-UN-099

UserService

especificarganadoras
Aplicacion de particiones equivalentes en la entrada del metodo
	-idTipoApuesta
	-Lista con varios idOpcionApuesta en la que uno no pertenece a dicho TipoApuesta
Excepcion:InvalidOptionException
Mockeado: 
	-TipoApuestaDao.find(idTipoApuesta) return TipoApuesta que se quiere resolver
*/

/*
PR-UN-100

UserService

consultarapuesta
Aplicacion de particiones equivalentes en la entrada del metodo
	-idUsuario
	-0
	-10
ApuestaBlock (lista de 10 ApuestaRealizadas,TRUE)
Mockeado: 
	-OpcionApuestaDao.find(idOpcionApuesta) return OpcionApuesta sobre la que se apostara
	-UserProfileDao.find(idUser) return UserProfile que realiza las apuesta
	-ApuestaRealizadaDao.findByUser(idUser,0,11) return lista de 11 apuestas
*/

/*
PR-UN-101

UserService

consultarapuesta
Aplicacion de particiones equivalentes en la entrada del metodo
	-idUsuario
	-10
	-10
ApuestaBlock (lista de 2 ApuestasRealizadas,FALSE)
Mockeado: 
	-OpcionApuestaDao.find(idOpcionApuesta) return OpcionApuesta sobre la que se apostara
	-UserProfileDao.find(idUser) return UserProfile que realiza las apuesta
	-ApuestaRealizadaDao.findByUser(idUser,10,11) return lista de 2 apuestas
*/

/*
PR-UN-102

UserService

consultarapuesta
Aplicacion de particiones equivalentes en la entrada del metodo
	-idUsuario
	-0
	-10
ApuestaBlock (lista de 2 ApuestasRealizadas,FALSE)
Mockeado: 
	-OpcionApuestaDao.find(idOpcionApuesta) return OpcionApuesta sobre la que se apostara
	-UserProfileDao.find(idUser) return UserProfile que realiza las apuesta
	-ApuestaRealizadaDao.findByUser(idUser,0,11) return lista de 2 apuestas
*/

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Implementadas las pruebas de los metodos crud de Evento y los que no son crud de todos.
* Implementadas las perubas de todos los metodos del servicio excepto:

	-findCategories
	-findEventoById
	-findTipoApuestaById
	-findOpcionApuestaById
	-getNumberOfEventos
	-findApuestaById








